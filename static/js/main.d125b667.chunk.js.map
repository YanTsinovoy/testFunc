{"version":3,"sources":["TestingComponent.js","superPuperFunction.js","store.js","App.js","serviceWorker.js","index.js"],"names":["mapStateToProps","state","test","store","subscribe","console","log","getState","Testing","value","error","errorTxt","inputConfigHandler","e","val","warn","target","eval","concat","Error","_this","setState","err","message","testHandler","props","get","typeRequest","typeSuccess","typeFail","p","this","s","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onBlur","placeholder","style","display","background","status","disabled","onClick","Component","connect","getRequest","type","payload","getRequestSuccess","action","getRequestFail","config","typesReq","_ref","Object","C_ProjectsJs_testing_from_react_super_func_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","C_ProjectsJs_testing_from_react_super_func_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","dispatch","wrap","_context","prev","next","axios","sent","t0","stop","_x","apply","arguments","reducers","combineReducers","length","undefined","C_ProjectsJs_testing_from_react_super_func_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","createStore","applyMiddleware","thunk","App","react_default","es","TestingComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d125b667.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport get from \"./superPuperFunction.js\"\r\nimport store from \"./store.js\"\r\n\r\nlet mapStateToProps = state => ({test: state.test})\r\n\r\nstore.subscribe(()=> console.log(store.getState()))\r\n\r\nclass Testing extends Component {\r\n  state = {\r\n    value: null,\r\n    error: true,\r\n    errorTxt: \"\"\r\n  }\r\n  inputConfigHandler = e => {\r\n    console.warn(e.target.value)\r\n    var val\r\n    try{\r\n      eval(`val = ${e.target.value}`)\r\n      console.log(val)\r\n      console.log(typeof val, val[\"url\"])\r\n      if(typeof val === \"object\" && val[\"url\"] ){\r\n        console.log(val)\r\n        this.setState({value: val, error: false, errorTxt: \"\"})\r\n      }  else throw new Error(\"Incorrect value\")\r\n    } catch(err){\r\n      this.setState({value: null, error: true, errorTxt: err.message})\r\n    }\r\n  }\r\n  testHandler = e => {\r\n    console.log(\"i'm work\")\r\n    this.props.get(this.state.value, {\r\n      typeRequest: \"TEST_PENDING\",\r\n      typeSuccess: \"TEST_RESOLVED\",\r\n      typeFail: \"TEST_REJECTED\"\r\n    })\r\n  }\r\n  render() {\r\n    let p = this.props\r\n    let s = this.state\r\n    console.log(s)\r\n    return(\r\n      <div className=\"main\">\r\n        <label className=\"main__label\">config:\r\n          <textarea className=\"main__inp\" onBlur={this.inputConfigHandler}\r\n          placeholder = {`{\r\n\t\t\turl: \"https://test-app-a-level.herokuapp.com/auth/login\",\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t\tdata: \"\"\r\n\t\t}`} />\r\n        </label>\r\n        <div className=\"main__wind\"><pre>{`export function get ( config, typesReq ) {\r\n    const {typeRequest, typeSuccess, typeFail} = typesReq\r\n    return async function (dispatch){\r\n        dispatch (getRequest(typeRequest))\r\n        try {\r\n            let payload = await axios( config )\r\n            dispatch (getRequestSuccess({\r\n                type: typeSuccess,\r\n                payload}))\r\n        }\r\n        catch(error){\r\n            dispatch (getRequestFail({\r\n                type: typeFail,\r\n                error\r\n            }))\r\n        }\r\n    }\r\n}\r\n        `}</pre>\r\n        </div>\r\n        <div className=\"main__error\" style={{display: s.error ? \"block\" : \"none\" , background: \"red\"}}>\r\n          {s.errorTxt}\r\n        </div>\r\n        <div className=\"main__status\"\r\n          style={{background: p.test.status === \"RESOLVED\" ?\r\n          \"#0f0\" : p.test.status === \"REJECTED\" ? \"#f00\"\r\n          : p.test.status === \"PENDING\" ? \"yellow\" : \"#00f\"}}>\r\n          {p.test.status || \"NOTHING\"}\r\n        </div>\r\n        <button disabled={s.error} onClick={this.testHandler}>TEST</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nTesting = connect(mapStateToProps,{get})(Testing)\r\n\r\nexport default Testing\r\n","import axios from \"axios\";\r\n\r\nconst getRequest = (type) => ({\r\n    type,\r\n    status: \"PENDING\",\r\n    payload: null,\r\n    error: null\r\n})\r\n\r\nconst getRequestSuccess = (action) => {\r\n    const {type, payload} = action\r\n    return ({\r\n        type,\r\n        status: \"RESOLVED\",\r\n        payload,\r\n        error: null\r\n    }\r\n)}\r\n\r\nconst getRequestFail = (action) => {\r\n    const {type, error} = action\r\n    return ({\r\n        type,\r\n        status: \"REJECTED\",\r\n        payload: null,\r\n        error\r\n    }\r\n)}\r\n\r\nexport function get ( /*arg, */config, typesReq ) {\r\n    // const {url, id} = arg\r\n    const {typeRequest, typeSuccess, typeFail} = typesReq\r\n    console.log(typesReq);\r\n    console.warn(\"get\");\r\n    return async function (dispatch){\r\n        console.warn(\"start\");\r\n        dispatch (getRequest(typeRequest))\r\n        try {\r\n            console.warn(\"try\");\r\n            let payload = await axios(/*`${url}/${id}`,*/\r\n                config\r\n            )\r\n            console.log(payload);\r\n            dispatch (getRequestSuccess({\r\n                type: typeSuccess,\r\n                payload}))\r\n            console.warn(\"dispatch\");\r\n        }\r\n\r\n        catch(error){\r\n            console.error(\"catch\");\r\n            dispatch (getRequestFail({\r\n                type: typeFail,\r\n                error\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport default get\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nlet testReducer = (state = {payload: null, error: null, status: null },action) => {\r\n  if(action.type === \"TEST_PENDING\")\r\n    return {...state, status: action.status}\r\n  if(action.type === \"TEST_RESOLVED\")\r\n    return {error: action.error, payload: action.payload, status: action.status}\r\n  if(action.type === \"TEST_REJECTED\")\r\n    return {error: action.error, payload: action.payload, status: action.status}\r\n  return state\r\n}\r\n\r\nconst reducers = combineReducers({\r\n  test: testReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport default store\r\n","import React, { Component } from 'react';\nimport {Provider} from 'react-redux';\nimport store from \"./store.js\"\nimport Testing from \"./TestingComponent.js\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store = {store}>\n        <div className = \"App\">\n          <Testing />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}